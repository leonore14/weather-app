{"version":3,"sources":["components/CurrentWeather.js","components/Title.js","components/Search.js","components/Day.js","components/DaysList.js","components/Home.js","components/Contact.js","components/Navbar.js","components/Loading.js","components/Error.js","App.js","serviceWorker.js","index.js"],"names":["CurrentWeather","props","currentTemp","data","list","main","temp","toFixed","currentFeels","feels_like","className","humidity","Title","cityName","Search","onSearch","useState","text","setText","onSubmit","e","preventDefault","type","onChange","target","value","Day","weeklyTemp","weeklyFeels","src","weather","icon","format","dt_txt","DaysList","dailyData","setDailyData","useEffect","setData","filter","includes","map","day","key","Home","Contact","href","Navbar","activeClassName","exact","to","override","css","Loading","isLoading","loading","height","width","color","Error","App","getLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","fetchData","setState","error","fetch","process","then","res","json","state","this","path","render","city","name","component","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.28579f17.chunk.js","sourcesContent":["import React from 'react';\n\nconst CurrentWeather = (props) => {\n    \n    const currentTemp = (props.data.list[0].main.temp).toFixed();\n    const currentFeels = (props.data.list[0].main.feels_like).toFixed();\n\n    return(\n        <div className='currentWeather'>\n            <div>Current Temp: {currentTemp} 째C</div>\n            <div>Feels Like: {currentFeels} 째C</div>\n            <div>humidity: {props.data.list[0].main.humidity} %</div>\n        </div>\n    )\n}\n\nexport default CurrentWeather;","import React from 'react';\n\nconst Title = ({ cityName }) => {\n    return (\n        <h1 className=\"title\">\n            Hello!\n            <br></br>\n            This is the weather in {cityName}\n        </h1>\n    )\n}\n\nexport default Title;","import React, { useState } from 'react' ;\n\nconst Search = ({ onSearch }) => {\n    \n    const[text, setText] = useState('')\n\n    const handleChange = (e) => {\n        setText(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSearch(text)\n    }\n\n    return(\n            <form onSubmit={handleSubmit} className='searchForm'>\n                <input type=\"text\" onChange={handleChange} className=\"inputText\" />\n                <input type=\"submit\" value=\"Search !\" className=\"inputSubmit\" />\n            </form>\n        )\n}\n\nexport default Search ;","import React from 'react';\nimport Moment from 'react-moment';\n\nconst Day = (props) => {\n\n    {/*const mydate= new Date(props.dt_txt)*/}\n\n    const weeklyTemp = (props.main.temp).toFixed();\n    const weeklyFeels = (props.main.feels_like).toFixed();\n\n\n    return( \n\n        <>\n        <div className=\"dayDiv\">\n            <img src={`http://openweathermap.org/img/wn/${props.weather[0].icon}@2x.png`} />\n            <div>\n                <h4><Moment format='ddd MMMM Do'>{props.dt_txt}</Moment></h4>\n                {/*<h3>{mydate.toDateString()}</h3>*/}\n                <div>Temperature {weeklyTemp}째C</div>\n                <div>Feels Like {weeklyFeels}째C</div>\n                <div>Humidity {props.main.humidity}%</div>\n            </div>\n        </div>\n        </>\n    )\n}\n\nexport default Day;","import React, { useState, useEffect } from 'react';\nimport Day from './Day';\n\nconst DaysList = (props) => {\n\n    const[dailyData, setDailyData] = useState([]);\n\n    useEffect(()=> setData(), [props])\n    \n    const setData = () => {\n        setDailyData(\n            props.data.list.filter(data => \n                data.dt_txt.includes('12:00:00')\n            )\n        )\n    }\n\n    return(\n        <>\n            <h2 className=\"weeklyTitle\">Weekly Weather in {props.data.cityName}</h2>\n            <div className=\"dayList\">{\n            dailyData.map(day => <Day {...day} key={day.dt_txt} />)\n            }\n            </div>\n        </>\n    )\n}\n\nexport default DaysList ;","import React from 'react';\nimport CurrentWeather from './CurrentWeather';\nimport Title from './Title';\nimport Search from './Search';\nimport DaysList from './DaysList';\n\n\nconst Home = (props) => {\n    return (\n        <>\n            <Search onSearch={props.onSearch} />\n            <Title cityName={props.cityName} />\n            <CurrentWeather data= {props} />\n            <DaysList data={props} />\n        </>\n    )\n}\n\nexport default Home ;","import React from 'react';\nimport '../App.css';\n\n\nconst Contact = () => {\n    return(\n        <div className=\"contact\">\n            <p>I am Leonore. Soon-to-be Front-End Developer !</p>\n            <p>Don't hesitate to send me an <a href=\"mailto:leonore14@gmail.com\">email</a> if you like my work ;-)</p>\n        </div>\n    )\n    \n}\n\nexport default Contact ;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\n\nconst Navbar = () => {\n    return(\n        <div>\n            <ul className='navbar'>\n                <li>\n                    <NavLink activeClassName='active' exact to='/'>Home</NavLink>\n                </li>\n                <li>\n                    <NavLink activeClassName='active' to='/contact'>Contact</NavLink>\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Navbar ;","import React from 'react';\nimport BarLoader from \"react-spinners/BarLoader\";\nimport { css } from \"@emotion/core\";\n\nconst override = css`\n  margin: 30% auto 30% auto;\n`;\n\nconst Loading =  ({ isLoading }) => {\n    return(\n    <BarLoader loading={isLoading} height={5} width={250} color={\"#EC6D4C\"} css={override} />\n    )\n}\n\nexport default Loading ;\n","import React from 'react';\n\nconst Error =  () => {\n    return(\n    <div className=\"error\">\n        Error ! \n        You have to allow your geolocation :)\n    </div>\n    )\n}\n\nexport default Error ;","import React, { Component } from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport Contact from './components/Contact';\nimport Navbar from './components/Navbar';\nimport Loading from './components/Loading';\nimport Error from './components/Error';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      data: null,\n      error: false,\n    }\n  }\n\n  componentDidMount(){\n    this.getLocation()\n  }\n\n  getLocation = () => {\n    const success = position => {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n      this.fetchData(lat, lon);\n    }\n\n    const error = () => this.setState({ error : true})\n   \n    navigator.geolocation.getCurrentPosition(success, error)\n  }\n  \n\n\n  fetchData = (lat, lon) => {\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${process.env.REACT_APP_OPENWEATHERMAP_KEY}&units=metric`)\n    .then(res => res.json())\n    .then(data => {\n      this.setState({\n        data,\n      }) \n    })\n  }\n\n\n  onSearch = (text) => {\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${text}&appid=${process.env.REACT_APP_OPENWEATHERMAP_KEY}&units=metric`)\n    .then(res => res.json())\n    .then(data => {\n      this.setState({\n        data,\n      })\n    })\n  }\n\n  render(){\n    const { data } = this.state;\n    const renderData = () => {\n      if (data) {\n        return <Home {...data} onSearch={this.onSearch} cityName={data.city.name} />\n      } else if (this.state.error) {\n        return <Error />\n      } else {\n        return <Loading isLoading={!this.state.data} />\n      }\n    }\n  \n    return (\n      <>\n      <Navbar />\n      <Switch>\n        <Route exact path='/' render={() => renderData()} />\n        <Route path='/contact' component={Contact} />\n      </Switch>\n      </>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}